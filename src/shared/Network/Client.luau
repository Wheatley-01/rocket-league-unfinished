--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.1 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[0] = table.create(256)
Queue.Reliable[2] = table.create(256)
Queue.Reliable[3] = table.create(256)
export type InputTypes = { Throttle: number, ThrottleStartTime: number?, Steer: number, Boost: boolean, Jump: boolean }
local function ReadEVENT_CreateCar(): (string, string, Vector3)
	-- Read BLOCK: 16 bytes
	local BLOCK_START = Read(16)
	local Length = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value1 = buffer.readstring(RecieveBuffer, Read(Length), Length)
	Length = buffer.readu16(RecieveBuffer, BLOCK_START + 2)
	local Value2 = buffer.readstring(RecieveBuffer, Read(Length), Length)
	local X = buffer.readf32(RecieveBuffer, BLOCK_START + 4)
	local Y = buffer.readf32(RecieveBuffer, BLOCK_START + 8)
	local Z = buffer.readf32(RecieveBuffer, BLOCK_START + 12)
	local Value3 = Vector3.new(X, Y, Z)
	return Value1, Value2, Value3
end

local function WriteEVENT_PlayerInput(Value1: { Throttle: number, ThrottleStartTime: number?, Steer: number, Boost: boolean, Jump: boolean }, Value2: number): ()
	-- Allocate BLOCK: 14 bytes
	local BLOCK_START = Allocate(14)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	buffer.writei8(SendBuffer, BLOCK_START + 1, Value1.Throttle)
	buffer.writeu8(SendBuffer, BLOCK_START + 2, Value1.ThrottleStartTime ~= nil and 1 or 0)
	if Value1.ThrottleStartTime ~= nil then
		-- Allocate BLOCK: 4 bytes
		local BLOCK_START = Allocate(4)
		buffer.writei32(SendBuffer, BLOCK_START + 0, Value1.ThrottleStartTime)
	end
	buffer.writei8(SendBuffer, BLOCK_START + 3, Value1.Steer)
	buffer.writeu8(SendBuffer, BLOCK_START + 4, Value1.Boost and 1 or 0)
	buffer.writeu8(SendBuffer, BLOCK_START + 5, Value1.Jump and 1 or 0)
	buffer.writef64(SendBuffer, BLOCK_START + 6, Value2)
end

local function ReadEVENT_InputBroadcast(): (any, { Throttle: number, ThrottleStartTime: number?, Steer: number, Boost: boolean, Jump: boolean }, number)
	-- Read BLOCK: 7 bytes
	local BLOCK_START = Read(7)
	RecieveInstanceCursor += 1
	local Value1 = RecieveInstances[RecieveInstanceCursor]
	local Value2 = {} :: any
	Value2.Throttle = buffer.readi8(RecieveBuffer, BLOCK_START + 0)
	if buffer.readu8(RecieveBuffer, BLOCK_START + 1) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value2.ThrottleStartTime = buffer.readi32(RecieveBuffer, BLOCK_START + 0)
	end
	Value2.Steer = buffer.readi8(RecieveBuffer, BLOCK_START + 2)
	Value2.Boost = (buffer.readu8(RecieveBuffer, BLOCK_START + 3) == 1)
	Value2.Jump = (buffer.readu8(RecieveBuffer, BLOCK_START + 4) == 1)
	local Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 5)
	local Value3
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			Value3 = -math.huge
		else
			Value3 = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		Value3 = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		Value3 = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		Value3 = if Encoded // 0x8000 == 1 then -Result else Result
	end
	return Value1, Value2, Value3
end

local function ReadEVENT_StateUpdate(): (any)
	RecieveInstanceCursor += 1
	local Value = RecieveInstances[RecieveInstanceCursor]
	return Value
end

local function WriteEVENT_SendTime(Value: number): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	if Value > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0b0_11111_0000000000)
	elseif Value < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0b1_11111_0000000000)
	elseif Value ~= Value then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0b1_11111_0000000001)
	elseif Value == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0)
	else
		local float = Value
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 1, Result)
	end
end

local function WriteEVENT_SendInput(Value: number): ()
	-- Allocate BLOCK: 3 bytes
	local BLOCK_START = Allocate(3)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 1)
	if Value > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0b0_11111_0000000000)
	elseif Value < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0b1_11111_0000000000)
	elseif Value ~= Value then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0b1_11111_0000000001)
	elseif Value == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 1, 0)
	else
		local float = Value
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 1, Result)
	end
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	CreateCar = {
		On = NOOP
	},
	PlayerInput = {
		Fire = NOOP
	},
	InputBroadcast = {
		On = NOOP
	},
	StateUpdate = {
		On = NOOP
	},
	SendTime = {
		Fire = NOOP
	},
	SendInput = {
		Fire = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsClient() then
    error("Client network module can only be required from the client.")
end

local Reliable: RemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:WaitForChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent

local function StepReplication()
    if SendCursor <= 0 then
        return
    end

    local Buffer = buffer.create(SendCursor)
    buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
    Reliable:FireServer(Buffer, SendInstances)

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    table.clear(SendInstances)
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value1: string, Value2: string, Value3: Vector3 = ReadEVENT_CreateCar()
			if Events.Reliable[0] ~= nil then
				Events.Reliable[0](Value1, Value2, Value3)
			else
				if #Queue.Reliable[0] > 256 then
					warn("[Blink]: Event queue of \"CreateCar\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[0], {Value1, Value2, Value3} :: {any})
			end
		elseif Index == 2 then
			local Value1: any, Value2: { Throttle: number, ThrottleStartTime: number?, Steer: number, Boost: boolean, Jump: boolean }, Value3: number = ReadEVENT_InputBroadcast()
			if Events.Reliable[2] ~= nil then
				Events.Reliable[2](Value1, Value2, Value3)
			else
				if #Queue.Reliable[2] > 256 then
					warn("[Blink]: Event queue of \"InputBroadcast\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[2], {Value1, Value2, Value3} :: {any})
			end
		elseif Index == 3 then
			local Value: any = ReadEVENT_StateUpdate()
			if Events.Reliable[3] ~= nil then
				Events.Reliable[3](Value)
			else
				if #Queue.Reliable[3] > 256 then
					warn("[Blink]: Event queue of \"StateUpdate\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[3], {Value} :: {any})
			end
		end
	end
end)
Unreliable.OnClientEvent:Connect(function(Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	CreateCar = {
		On = function(Listener: (Value1: string, Value2: string, Value3: Vector3) -> ()): () -> ()
			Events.Reliable[0] = Listener
			for Index, Arguments in Queue.Reliable[0] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[0] = {}
			return function (): ()
				if Events.Reliable[0] == Listener then
					Events.Reliable[0] = nil
				end
			end
		end
	},
	PlayerInput = {
		Fire = function(Value1: { Throttle: number, ThrottleStartTime: number?, Steer: number, Boost: boolean, Jump: boolean }, Value2: number): ()
			WriteEVENT_PlayerInput(Value1, Value2)
		end
	},
	InputBroadcast = {
		On = function(Listener: (Value1: any, Value2: { Throttle: number, ThrottleStartTime: number?, Steer: number, Boost: boolean, Jump: boolean }, Value3: number) -> ()): () -> ()
			Events.Reliable[2] = Listener
			for Index, Arguments in Queue.Reliable[2] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[2] = {}
			return function (): ()
				if Events.Reliable[2] == Listener then
					Events.Reliable[2] = nil
				end
			end
		end
	},
	StateUpdate = {
		On = function(Listener: (Value: any) -> ()): () -> ()
			Events.Reliable[3] = Listener
			for Index, Arguments in Queue.Reliable[3] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[3] = {}
			return function (): ()
				if Events.Reliable[3] == Listener then
					Events.Reliable[3] = nil
				end
			end
		end
	},
	SendTime = {
		Fire = function(Value: number): ()
			local Previous = Save()
			Load()
			WriteEVENT_SendTime(Value)
			local Buffer = buffer.create(SendCursor)
			buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
			Unreliable:FireServer(Buffer, SendInstances)
			Load(Previous)
		end
	},
	SendInput = {
		Fire = function(Value: number): ()
			local Previous = Save()
			Load()
			WriteEVENT_SendInput(Value)
			local Buffer = buffer.create(SendCursor)
			buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
			Unreliable:FireServer(Buffer, SendInstances)
			Load(Previous)
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL