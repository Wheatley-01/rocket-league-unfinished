--!strict
--!native
--!optimize 2
--!nolint LocalShadow
--#selene: allow(shadowing)
-- File generated by Blink v0.17.1 (https://github.com/1Axen/Blink)
-- This file is not meant to be edited

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local BASE_EVENT_NAME = "BLINK"
local Invocations = 0

local SendSize = 64
local SendOffset = 0
local SendCursor = 0
local SendBuffer = buffer.create(64)
local SendInstances = {}

local RecieveCursor = 0
local RecieveBuffer = buffer.create(64)

local RecieveInstances = {}
local RecieveInstanceCursor = 0

local Null = newproxy()

type Entry = {
    value: any,
    next: Entry?
}

type Queue = {
    head: Entry?,
    tail: Entry?
}

type BufferSave = {
    Size: number, 
    Cursor: number, 
    Buffer: buffer, 
    Instances: {Instance}
}

local function Read(Bytes: number)
    local Offset = RecieveCursor
    RecieveCursor += Bytes
    return Offset
end

local function Save(): BufferSave
    return {
        Size = SendSize,
        Cursor = SendCursor,
        Buffer = SendBuffer,
        Instances = SendInstances
    }
end

local function Load(Save: BufferSave?)
    if Save then
        SendSize = Save.Size
        SendCursor = Save.Cursor
        SendOffset = Save.Cursor
        SendBuffer = Save.Buffer
        SendInstances = Save.Instances
        return
    end

    SendSize = 64
    SendCursor = 0
    SendOffset = 0
    SendBuffer = buffer.create(64)
    SendInstances = {}
end

local function Invoke()
    if Invocations == 255 then
        Invocations = 0
    end

    local Invocation = Invocations
    Invocations += 1
    return Invocation
end

local function Allocate(Bytes: number)
    local InUse = (SendCursor + Bytes)
    if InUse > SendSize then
        --> Avoid resizing the buffer for every write
        while InUse > SendSize do
            SendSize *= 1.5
        end

        local Buffer = buffer.create(SendSize)
        buffer.copy(Buffer, 0, SendBuffer, 0, SendCursor)
        SendBuffer = Buffer
    end

    SendOffset = SendCursor
    SendCursor += Bytes
    
    return SendOffset
end

local function CreateQueue(): Queue
    return {
        head = nil,
        tail = nil
    }
end

local function Pop(queue: Queue): any
    local head = queue.head
    if head == nil then
        return
    end

    queue.head = head.next
    return head.value
end

local function Push(queue: Queue, value: any)
    local entry: Entry = {
        value = value,
        next = nil
    }

    if queue.tail ~= nil then
        queue.tail.next = entry
    end

    queue.tail = entry

    if queue.head == nil then
        queue.head = entry
    end
end

local Calls = table.create(256)

local Events: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

local Queue: any = {
    Reliable = table.create(256),
    Unreliable = table.create(256)
}

Queue.Reliable[1] = table.create(256)
Queue.Unreliable[0] = table.create(256)
Queue.Unreliable[1] = table.create(256)
export type InputTypes = { Throttle: number, ThrottleStartTime: number?, Steer: number, Boost: boolean, Jump: boolean }
local function WriteEVENT_CreateCar(Value1: string, Value2: string, Value3: Vector3): ()
	-- Allocate BLOCK: 17 bytes
	local BLOCK_START = Allocate(17)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 0)
	local Length = #Value1
	buffer.writeu16(SendBuffer, BLOCK_START + 1, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value1, Length)
	local Length = #Value2
	buffer.writeu16(SendBuffer, BLOCK_START + 3, Length)
	Allocate(Length)
	buffer.writestring(SendBuffer, SendOffset, Value2, Length)
	local Vector = Value3
	buffer.writef32(SendBuffer, BLOCK_START + 5, Vector.X)
	buffer.writef32(SendBuffer, BLOCK_START + 9, Vector.Y)
	buffer.writef32(SendBuffer, BLOCK_START + 13, Vector.Z)
end

local function ReadEVENT_PlayerInput(): ({ Throttle: number, ThrottleStartTime: number?, Steer: number, Boost: boolean, Jump: boolean }, number)
	-- Read BLOCK: 13 bytes
	local BLOCK_START = Read(13)
	local Value1 = {} :: any
	Value1.Throttle = buffer.readi8(RecieveBuffer, BLOCK_START + 0)
	if buffer.readu8(RecieveBuffer, BLOCK_START + 1) == 1 then
		-- Read BLOCK: 4 bytes
		local BLOCK_START = Read(4)
		Value1.ThrottleStartTime = buffer.readi32(RecieveBuffer, BLOCK_START + 0)
	end
	Value1.Steer = buffer.readi8(RecieveBuffer, BLOCK_START + 2)
	Value1.Boost = (buffer.readu8(RecieveBuffer, BLOCK_START + 3) == 1)
	Value1.Jump = (buffer.readu8(RecieveBuffer, BLOCK_START + 4) == 1)
	local Value2 = buffer.readf64(RecieveBuffer, BLOCK_START + 5)
	return Value1, Value2
end

local function WriteEVENT_InputBroadcast(Value1: any, Value2: { Throttle: number, ThrottleStartTime: number?, Steer: number, Boost: boolean, Jump: boolean }, Value3: number): ()
	-- Allocate BLOCK: 8 bytes
	local BLOCK_START = Allocate(8)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 2)
	table.insert(SendInstances, if Value1 == nil then Null else Value1)
	buffer.writei8(SendBuffer, BLOCK_START + 1, Value2.Throttle)
	buffer.writeu8(SendBuffer, BLOCK_START + 2, Value2.ThrottleStartTime ~= nil and 1 or 0)
	if Value2.ThrottleStartTime ~= nil then
		-- Allocate BLOCK: 4 bytes
		local BLOCK_START = Allocate(4)
		buffer.writei32(SendBuffer, BLOCK_START + 0, Value2.ThrottleStartTime)
	end
	buffer.writei8(SendBuffer, BLOCK_START + 3, Value2.Steer)
	buffer.writeu8(SendBuffer, BLOCK_START + 4, Value2.Boost and 1 or 0)
	buffer.writeu8(SendBuffer, BLOCK_START + 5, Value2.Jump and 1 or 0)
	if Value3 > 65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 6, 0b0_11111_0000000000)
	elseif Value3 < -65504 then
		buffer.writeu16(SendBuffer, BLOCK_START + 6, 0b1_11111_0000000000)
	elseif Value3 ~= Value3 then
		buffer.writeu16(SendBuffer, BLOCK_START + 6, 0b1_11111_0000000001)
	elseif Value3 == 0 then
		buffer.writeu16(SendBuffer, BLOCK_START + 6, 0)
	else
		local float = Value3
		local Abosulte = math.abs(float)
		local Interval = math.ldexp(1, math.floor(math.log(Abosulte, 2)) - 10)
		local RoundedValue = (Abosulte // Interval) * Interval
		local Fraction, Exponent = math.frexp(RoundedValue)
		Exponent += 14
		local Mantissa = math.round(if Exponent <= 0
			then Fraction * 0x400 / math.ldexp(1, math.abs(Exponent))
			else Fraction * 0x800) % 0x400
		local Result = Mantissa
			+ math.max(Exponent, 0) * 0x400
			+ if float < 0 then 0x8000 else 0
		buffer.writeu16(SendBuffer, BLOCK_START + 6, Result)
	end
end

local function WriteEVENT_StateUpdate(Value: any): ()
	-- Allocate BLOCK: 1 bytes
	local BLOCK_START = Allocate(1)
	buffer.writeu8(SendBuffer, BLOCK_START + 0, 3)
	table.insert(SendInstances, if Value == nil then Null else Value)
end

local function ReadEVENT_SendTime(): (number)
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			Value = -math.huge
		else
			Value = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		Value = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		Value = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		Value = if Encoded // 0x8000 == 1 then -Result else Result
	end
	return Value
end

local function ReadEVENT_SendInput(): (number)
	-- Read BLOCK: 2 bytes
	local BLOCK_START = Read(2)
	local Encoded = buffer.readu16(RecieveBuffer, BLOCK_START + 0)
	local Value
	local MantissaExponent = Encoded % 0x8000
	if MantissaExponent == 0b0_11111_0000000000  then
		if Encoded // 0x8000 == 1 then
			Value = -math.huge
		else
			Value = math.huge
		end
	elseif MantissaExponent == 0b1_11111_0000000000   then
		Value = 0 / 0
	elseif MantissaExponent == 0b0_00000_0000000000   then
		Value = 0
	else
		local Mantissa = MantissaExponent % 0x400
		local Exponent = MantissaExponent // 0x400
		local Fraction;
		if Exponent == 0 then
			Fraction = Mantissa / 0x400
		else
			Fraction = Mantissa / 0x800 + 0.5
		end
		local Result = math.ldexp(Fraction, Exponent - 14)
		Value = if Encoded // 0x8000 == 1 then -Result else Result
	end
	return Value
end

if not RunService:IsRunning() then
	local NOOP = function() end
	local Returns = table.freeze({
	CreateCar = {
		Fire = NOOP,
		FireAll = NOOP,
		FireList = NOOP,
		FireExcept = NOOP
	},
	PlayerInput = {
		On = NOOP
	},
	InputBroadcast = {
		Fire = NOOP,
		FireAll = NOOP,
		FireList = NOOP,
		FireExcept = NOOP
	},
	StateUpdate = {
		Fire = NOOP,
		FireAll = NOOP,
		FireList = NOOP,
		FireExcept = NOOP
	},
	SendTime = {
		On = NOOP
	},
	SendInput = {
		On = NOOP
	},
	})
	return Returns :: BLINK_EVENTS_SYMBOL
end

if not RunService:IsServer() then
    error("Server network module can only be required from the server.")
end

local Reliable: RemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_RELIABLE_REMOTE") :: RemoteEvent
if not Reliable then
    local RemoteEvent = Instance.new("RemoteEvent")
    RemoteEvent.Name = BASE_EVENT_NAME .. "_RELIABLE_REMOTE"
    RemoteEvent.Parent = ReplicatedStorage
    Reliable = RemoteEvent
end

local Unreliable: UnreliableRemoteEvent = ReplicatedStorage:FindFirstChild(BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE") :: UnreliableRemoteEvent
if not Unreliable then
    local UnreliableRemoteEvent = Instance.new("UnreliableRemoteEvent")
    UnreliableRemoteEvent.Name = BASE_EVENT_NAME .. "_UNRELIABLE_REMOTE"
    UnreliableRemoteEvent.Parent = ReplicatedStorage
    Unreliable = UnreliableRemoteEvent
end

local PlayersMap: {[Player]: BufferSave} = {}

Players.PlayerRemoving:Connect(function(Player)
    PlayersMap[Player] = nil
end)

local function StepReplication()
    for Player, Send in PlayersMap do
        if Send.Cursor <= 0 then
            continue
        end

        local Buffer = buffer.create(Send.Cursor)
        buffer.copy(Buffer, 0, Send.Buffer, 0, Send.Cursor)
        Reliable:FireClient(Player, Buffer, Send.Instances)

        Send.Size = 64
        Send.Cursor = 0
        Send.Buffer = buffer.create(64)
        table.clear(Send.Instances)
    end
end
RunService.Heartbeat:Connect(StepReplication)
Reliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 1 then
			local Value1: { Throttle: number, ThrottleStartTime: number?, Steer: number, Boost: boolean, Jump: boolean }, Value2: number = ReadEVENT_PlayerInput()
			if Events.Reliable[1] ~= nil then
				Events.Reliable[1](Player, Value1, Value2)
			else
				if #Queue.Reliable[1] > 256 then
					warn("[Blink]: Event queue of \"PlayerInput\" exceeded 256, did you forget to implement a listener?")
				end
				table.insert(Queue.Reliable[1], {Player, Value1, Value2} :: {any})
			end
		end
	end
end)
Unreliable.OnServerEvent:Connect(function(Player: Player, Buffer: buffer, Instances: {Instance})
	RecieveCursor = 0
	RecieveBuffer = Buffer
	RecieveInstances = Instances
	RecieveInstanceCursor = 0
	local Size = buffer.len(RecieveBuffer)
	while (RecieveCursor < Size) do
		-- Read BLOCK: 1 bytes
		local BLOCK_START = Read(1)
		local Index = buffer.readu8(RecieveBuffer, BLOCK_START + 0)
		if Index == 0 then
			local Value: number = ReadEVENT_SendTime()
			if Events.Unreliable[0] ~= nil then
				Events.Unreliable[0](Player, Value)
			end
		elseif Index == 1 then
			local Value: number = ReadEVENT_SendInput()
			if Events.Unreliable[1] ~= nil then
				Events.Unreliable[1](Player, Value)
			end
		end
	end
end)


local Returns = table.freeze({
	StepReplication = StepReplication,

	CreateCar = {
		Fire = function(Player: Player, Value1: string, Value2: string, Value3: Vector3): ()
			Load(PlayersMap[Player])
			WriteEVENT_CreateCar(Value1, Value2, Value3)
			PlayersMap[Player] = Save()
		end,
		FireAll = function(Value1: string, Value2: string, Value3: Vector3): ()
			Load()
			WriteEVENT_CreateCar(Value1, Value2, Value3)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireList = function(List: {Player}, Value1: string, Value2: string, Value3: Vector3): ()
			Load()
			WriteEVENT_CreateCar(Value1, Value2, Value3)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in List do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireExcept = function(Except: Player, Value1: string, Value2: string, Value3: Vector3): ()
			Load()
			WriteEVENT_CreateCar(Value1, Value2, Value3)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
	},
	PlayerInput = {
		On = function(Listener: (Player: Player, Value1: { Throttle: number, ThrottleStartTime: number?, Steer: number, Boost: boolean, Jump: boolean }, Value2: number) -> ()): () -> ()
			Events.Reliable[1] = Listener
			for Index, Arguments in Queue.Reliable[1] do
				Listener(table.unpack(Arguments))
			end
			Queue.Reliable[1] = {}
			return function (): ()
				if Events.Reliable[1] == Listener then
					Events.Reliable[1] = nil
				end
			end
		end
	},
	InputBroadcast = {
		Fire = function(Player: Player, Value1: any, Value2: { Throttle: number, ThrottleStartTime: number?, Steer: number, Boost: boolean, Jump: boolean }, Value3: number): ()
			Load(PlayersMap[Player])
			WriteEVENT_InputBroadcast(Value1, Value2, Value3)
			PlayersMap[Player] = Save()
		end,
		FireAll = function(Value1: any, Value2: { Throttle: number, ThrottleStartTime: number?, Steer: number, Boost: boolean, Jump: boolean }, Value3: number): ()
			Load()
			WriteEVENT_InputBroadcast(Value1, Value2, Value3)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireList = function(List: {Player}, Value1: any, Value2: { Throttle: number, ThrottleStartTime: number?, Steer: number, Boost: boolean, Jump: boolean }, Value3: number): ()
			Load()
			WriteEVENT_InputBroadcast(Value1, Value2, Value3)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in List do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireExcept = function(Except: Player, Value1: any, Value2: { Throttle: number, ThrottleStartTime: number?, Steer: number, Boost: boolean, Jump: boolean }, Value3: number): ()
			Load()
			WriteEVENT_InputBroadcast(Value1, Value2, Value3)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
	},
	StateUpdate = {
		Fire = function(Player: Player, Value: any): ()
			Load(PlayersMap[Player])
			WriteEVENT_StateUpdate(Value)
			PlayersMap[Player] = Save()
		end,
		FireAll = function(Value: any): ()
			Load()
			WriteEVENT_StateUpdate(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireList = function(List: {Player}, Value: any): ()
			Load()
			WriteEVENT_StateUpdate(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in List do
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
		FireExcept = function(Except: Player, Value: any): ()
			Load()
			WriteEVENT_StateUpdate(Value)
			local Buffer, Size, Instances = SendBuffer, SendCursor, SendInstances
			for _, Player in Players:GetPlayers() do
				if Player == Except then
					continue
				end
				Load(PlayersMap[Player])
				local Position = Allocate(Size)
				buffer.copy(SendBuffer, Position, Buffer, 0, Size)
				table.move(Instances, 1, #Instances, #SendInstances + 1, SendInstances)
				PlayersMap[Player] = Save()
			end
		end,
	},
	SendTime = {
		On = function(Listener: (Player: Player, Value: number) -> ()): () -> ()
			Events.Unreliable[0] = Listener
			return function (): ()
				if Events.Unreliable[0] == Listener then
					Events.Unreliable[0] = nil
				end
			end
		end
	},
	SendInput = {
		On = function(Listener: (Player: Player, Value: number) -> ()): () -> ()
			Events.Unreliable[1] = Listener
			return function (): ()
				if Events.Unreliable[1] == Listener then
					Events.Unreliable[1] = nil
				end
			end
		end
	},
})
type BLINK_EVENTS_SYMBOL = typeof(Returns)
return Returns :: BLINK_EVENTS_SYMBOL